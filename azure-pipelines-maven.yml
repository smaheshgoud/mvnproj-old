# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- none
#- master

resources:
- repo: self

parameters:
  - name: imageTagToUse
    displayName: What Image Should We Use?
    type: string
    default: new

variables:
- group: common-group
- name: vmImageName
  value: 'ubuntu-latest'

# pool:
#   vmImage: ubuntu-latest

stages:
- stage: Build_Stage
  displayName: Build stage
  # dependsOn: Create_Resources
  jobs:
    - job: MavenBuild
      displayName: Build and push an image to container registry
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'clean package'
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(system.defaultworkingdirectory)'
          Contents: '**/*.war'
          TargetFolder: '$(build.artifactstagingdirectory)'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

    - job: BuildImage
      dependsOn: MavenBuild
      displayName: Build and push an image to container registry
    # condition: or(succeeded(), ne(variables['Azure.CreateResources'], 'true'))
      pool:
        vmImage: $(vmImageName)
      steps:
      
      - task: Docker@2
        displayName: Build and push an image to container registry
        condition: eq('${{ parameters.imageTagToUse}}', 'new')
        inputs:
          containerRegistry: 'containerregistery9'
          repository: '$(ACR.RepositoryName)'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags:  |
           $(Build.BuildId)
           latest
            
      - task: Bash@3
        name: 'DockerTag'
        inputs:
          targetType: 'inline'
          script: |
            echo "${{parameters.imageTagToUse}}"
            echo $BUILD_BUILDID
            tagId=$BUILD_BUILDID
            if [ "${{parameters.imageTagToUse}}" != new ];
            then
              echo "Setting to an existing tag"
              tagId="${{parameters.imageTagToUse}}"
            fi
            echo "TAG_ID: $tagId"
            echo "##vso[task.setvariable variable=TAG_ID;isOutput=true]$tagId"
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo $(DockerTag.TAG_ID)

      - task: CopyFiles@2
        inputs:
          SourceFolder: 'manifests/'
          Contents: '*.yml'
          TargetFolder: '$(build.artifactstagingdirectory)'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'manifests'
          publishLocation: 'Container'

      # - task: Docker@2
      #   displayName: Build and push an image to container registry
      #   condition: eq('${{ parameters.imageTagToUse}}', 'new')
      #   inputs:
      #     containerRegistry: $(dockerRegistryServiceConnection)
      #     repository: $(ACR.RepositoryName)
      #     command: 'buildAndPush'
      #     Dockerfile: '**/Dockerfile'
      #     tags:  |
      #      $(Build.BuildId)
      #      latest

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build_Stage

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
         steps:
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: 'akscluster1'
              secretType: 'dockerRegistry'
              secretName: 'azuresecret'
              namespace: default
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                  
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'akscluster1'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
              imagePullSecrets: |
                $(imagePullSecret)

